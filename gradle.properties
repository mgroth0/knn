# suppress inspection "UnusedProperty" for whole file
# https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties
# GRADLE PROPERTIES

# org.gradle.caching default is false
org.gradle.caching=false

# org.gradle.caching.debug default is false
# org.gradle.configureondemand default is false
# org.gradle.console default depends on how Gradle is invoked (=(auto,plain,rich,verbose))
# org.gradle.continuous.quietperiod default is 250 ms
# org.gradle.daemon default is true
# org.gradle.daemon.idletimeout default is 10800000 (3 hours)
# org.gradle.debug default is false
# org.gradle.debug.port default is 5005
# org.gradle.debug.server default is true
# org.gradle.debug.suspend default is true
# org.gradle.java.home default is complicated

##org.gradle.java.home=/Users/matthewgroth/Library/Java/JavaVirtualMachines/azul-16.0.2/Contents/Home/
# this is now in GRADLE_USER_HOME/gradle.properties
#org.gradle.java.home=/Users/matthewgroth/Library/Java/JavaVirtualMachines/openjdk-17.0.1/Contents/Home

# I used to have the two settings below set for 30g, but I was getting some general out of memory issues and seeing apps crash (even outside of gradle, suggesting these were using too many system resources). So let's try 20.


# org.gradle.jvmargs default is -Xmx512m "-XX:MaxMetaspaceSize=256m"
# hopefully the higher thread stack sizes will prevent stack overflow errors (https://stackoverflow.com/questions/71740807/gradle-7-stackoverflowerror-when-building)... yes this fixed it!!! .. no wait it didnt
# -XX:MaxJavaStackTraceDepth=-1 is for fixing the StackOverflowError...




org.gradle.jvmargs=-Xmx20g

#https://dev.to/martinhaeusler/is-your-kotlin-compiler-slow-here-s-a-potential-fix-4if4
kotlin.daemon.jvm.options=-Xmx20g





# org.gradle.priority default is normal
# org.gradle.vfs.verbose default is false
# org.gradle.vfs.watch is enabled by default in certain machines
# org.gradle.warning.mode default is summary
org.gradle.warning.mode=all



# org.gradle.workers.max default is number of CPUs
# matt: I actually think that it could be helpful to go higher than the number of CPUs because I'm doing git stuff and maybe other stuff that may be IO-bound? Let's see.
# greatly optimized build to not constantly run git pull and push. only running those when needed now, so setting this back to default
#org.gradle.workers.max=20



# org.gradle.logging.stacktrace default is internal
# org.gradle.welcome default is once
# KOTLIN PROPERTIES
kotlin.mpp.stability.nowarn=true
# ANDROID PROPERTIES
#android.useAndroidX=true
#android.enableJetifier=true
# this is from default js project
kotlin.js.generate.executable.default=false
# probably set to the same number as the number of cpus
#org.gradle.parallel.threads
# this is because some of my kotlin projects actually only call java methods and classes and therefore the kotlin stdlib is excessive
#kotlin.stdlib.default.dependency=false
#on second thought, it seems like this doesnt work with intelliJ. IntelliJ expects every kotlin file to have access to the kotlin stdlib, no simple way of getting around that.
#new kotlin 1.7.0 feature that is supposed to make compiling much faster
kotlin.incremental.useClasspathSnapshot=true

# https://youtrack.jetbrains.com/issue/KT-51712/KJS-IR-long-compilation-time#focus=Comments-27-5965806.0-0
#kotlin.incremental.js.ir=true

# https://plugins.jetbrains.com/docs/intellij/kotlin.html#kotlin-standard-library
# prevents a warning in IntelliJ plugin
# with this set to false, I have to manually include kotlin stdlib. Actually, I kind of like this. Maybe I don't always need it?
kotlin.stdlib.default.dependency = false


# org.gradle.logging.level default is "lifecycle level" or something, matts usual is now "warn"
org.gradle.logging.level=warn

verboseLogging=false




SIGN=true
buildScan=true
GIT=true
CHECK=true
GEN=true

NUM_BACK=1

# should i just always keep this true now that I always will have a kbuild jar anyway for OpenMind?
PARTIAL_BOOTSTRAP=false


# https://kotlinlang.org/docs/multiplatform-hierarchy.html#for-multiplatform-project-authors
# https://youtrack.jetbrains.com/issue/KTIJ-22345/False-positive-unresolved-reference-for-members-of-subclasses-of-expect-classes
kotlin.mpp.hierarchicalStructureSupport=true

# org.gradle.parallel default is false
org.gradle.parallel=true